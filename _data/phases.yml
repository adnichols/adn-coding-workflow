- number: "1"
  title: "Idea & Initial Specification"
  content: |
    <p>Every development cycle starts with an idea that gets refined into a formal specification.</p>
    
    <h4>Process:</h4>
    <ul class="feature-list">
        <li>Start with a high-level idea or concept</li>
        <li>Use Claude (desktop or Claude Code) to expand into detailed specification</li>
        <li>Request structured Markdown documentation</li>
        <li>Review and refine the specification</li>
    </ul>
    
    <h4>Key Files:</h4>
    <ul class="file-list">
        <li>specification.md - Initial idea documentation</li>
        <li>requirements.md - Refined requirements</li>
    </ul>
    
    <div class="highlight">
        <strong>Flexibility:</strong> This step can be done in Claude desktop or Claude Code depending on your preference and current context.
    </div>

- number: "ü§ñ"
  title: "Specialized Agents & Commands"
  content: |
    <p>The workflow leverages specialized agents and structured commands for different aspects of development.</p>
    
    <h4>Command Structure:</h4>
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üìã Command Categories</div>
            <ul class="feature-list">
                <li><strong>user:</strong> Main feature development commands</li>
                <li><strong>simplify:</strong> Code refactoring and cleanup commands</li>
                <li><strong>Arguments:</strong> Support file paths and options like NOSUBCONF</li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">ü§ñ Specialized Agents</div>
            <ul class="feature-list">
                <li><strong>@simplify-planner (Opus):</strong> Code archaeology specialist - identifies complexity accumulation, dead code paths, over-abstractions</li>
                <li><strong>@quality-reviewer:</strong> Production risk assessor - focuses on data loss, security vulnerabilities, performance killers, concurrency bugs</li>
                <li><strong>Evidence-Based Approach:</strong> Uses grep/glob analysis, deprecation markers, usage patterns for all decisions</li>
                <li><strong>ADR Documentation:</strong> Creates Architecture Decision Records with cleanup rationale and safety evidence</li>
            </ul>
        </div>
    </div>
    
    <h4>Agent-Specific Focus Areas:</h4>
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üîç @simplify-planner Targets</div>
            <ul class="feature-list">
                <li><strong>Dead Code:</strong> Unreachable branches, deprecated features with clear markers</li>
                <li><strong>Over-Abstraction:</strong> Unnecessary layers that add complexity without value</li>
                <li><strong>Duplication:</strong> Logic that can be safely consolidated</li>
                <li><strong>Legacy Patterns:</strong> Backward compatibility layers no longer needed</li>
                <li><strong>Safety Circuit Breakers:</strong> Stops for confirmation on changes affecting >3 packages or core interfaces</li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">‚ö†Ô∏è @quality-reviewer Categories</div>
            <ul class="feature-list">
                <li><strong>MUST FLAG:</strong> Data loss risks, security vulnerabilities, performance killers, concurrency bugs</li>
                <li><strong>WORTH RAISING:</strong> Logic errors, missing circuit breakers, resource leaks, unnecessary complexity</li>
                <li><strong>IGNORE:</strong> Style preferences, theoretical edge cases, minor optimizations</li>
                <li><strong>Focus:</strong> Real production failure risks, not theoretical problems</li>
            </ul>
        </div>
    </div>
    
    <h4>Complete Command Reference:</h4>
    <ul class="command-list">
        <li>user:create-prd.md - Generate PRD with clarifying questions</li>
        <li>user:generate-tasks.md [prd-file] - Two-phase task generation</li>
        <li>user:process-tasks.md [task-file] [NOSUBCONF] - Execute feature tasks</li>
        <li>simplify:create-plan.md [target-area] - Multi-agent refactor planning</li>
        <li>simplify:process-plan.md [plan-file] [NOSUBCONF] - Execute cleanup plan</li>
    </ul>
    
    <div class="highlight">
        <strong>Multi-Agent Orchestration:</strong> The system coordinates between specialized agents with distinct focuses - @simplify-planner for evidence-based complexity reduction and @quality-reviewer for production risk assessment. The @simplify-planner uses the more capable Opus model and creates detailed Architecture Decision Records (ADRs) with safety guarantees, while @quality-reviewer focuses specifically on issues that cause actual production failures rather than theoretical problems.
    </div>

- number: "2"
  title: "Architecture Review & Planning"
  content: |
    <p>The specification is reviewed by specialized architecture agents and turned into actionable plans.</p>
    
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üöÄ New Feature Path</div>
            <h4>Command:</h4>
            <ul class="command-list">
                <li>user:create-prd.md</li>
            </ul>
            <h4>Process:</h4>
            <ul class="feature-list">
                <li><strong>Clarifying Questions:</strong> Claude asks structured questions with letter/number lists for easy responses</li>
                <li><strong>Structured PRD:</strong> Generates comprehensive PRD with goals, user stories, requirements, success metrics</li>
                <li><strong>Junior Dev Ready:</strong> Assumes target audience is a junior developer - explicit and unambiguous</li>
                <li><strong>Interactive Refinement:</strong> Iterative process to ensure specification captures the full intent</li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">üîß Refactoring Path</div>
            <h4>Command:</h4>
            <ul class="command-list">
                <li>simplify:create-plan.md</li>
            </ul>
            <h4>Multi-Agent Process:</h4>
            <ul class="feature-list">
                <li><strong>@simplify-planner (Opus):</strong> Code archaeology specialist, evidence-based cleanup recommendations</li>
                <li><strong>@quality-reviewer:</strong> Reviews plan for production failure risks, safety validation</li>
                <li><strong>Unconditional Preservation:</strong> Guarantees identical user-facing behavior after cleanup</li>
                <li><strong>Safety Circuit Breakers:</strong> Stops for confirmation on risky changes (>3 packages, core interfaces)</li>
            </ul>
        </div>
    </div>
    
    <h4>üìã Command Examples:</h4>
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üöÄ Feature Development</div>
            <ul class="command-list">
                <li><code>/user:create-prd.md</code> - Start with your feature idea</li>
                <li><code>/user:create-prd.md</code> "Add user authentication system"</li>
                <li><code>/user:create-prd.md</code> "Implement real-time notifications"</li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">üîß Code Refactoring</div>
            <ul class="command-list">
                <li><code>/simplify:create-plan.md</code> - Analyze entire codebase</li>
                <li><code>/simplify:create-plan.md src/auth/</code> - Focus on auth module</li>
                <li><code>/simplify:create-plan.md components/legacy/</code> - Target legacy code</li>
            </ul>
        </div>
    </div>
    
    <h4>Output Files:</h4>
    <ul class="file-list">
        <li>/tasks/prd-[feature-name].md - Product Requirements Document</li>
        <li>/tasks/simplify-plan-[area-name].md - Refactoring plan with safety protocols</li>
    </ul>

- number: "3"
  title: "Task List Generation"
  content: |
    <p>Plans are broken down into executable task lists using a sophisticated two-phase approach with different workflows for each path.</p>
    
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üöÄ New Feature Tasks</div>
            <h4>Command:</h4>
            <ul class="command-list">
                <li>user:generate-tasks.md</li>
            </ul>
            <h4>Two-Phase Process:</h4>
            <ul class="feature-list">
                <li><strong>Phase 1:</strong> Generate ~5 high-level parent tasks</li>
                <li><strong>Confirmation:</strong> Present tasks and wait for user "Go" approval</li>
                <li><strong>Phase 2:</strong> Break down each parent into detailed sub-tasks</li>
                <li><strong>Codebase Analysis:</strong> Reviews existing infrastructure and patterns</li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">üîß Refactoring Tasks</div>
            <p><strong>No additional step needed!</strong></p>
            <p>The plan created in step 2 already serves as a comprehensive task checklist with four phases:</p>
            <ul class="feature-list">
                <li><strong>P1:</strong> Preparation and Safety Verification</li>
                <li><strong>P2:</strong> Plan Review and Validation</li>
                <li><strong>P3:</strong> Implementation Steps</li>
                <li><strong>P4:</strong> Completion and Documentation</li>
            </ul>
        </div>
    </div>
    
    <h4>üìã Command Examples:</h4>
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üöÄ Feature Task Generation</div>
            <ul class="command-list">
                <li><code>/user:generate-tasks.md tasks/prd-user-auth.md</code></li>
                <li><code>/user:generate-tasks.md tasks/prd-notifications.md</code></li>
                <li><code>/user:generate-tasks.md tasks/prd-payment-system.md</code></li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">üîß Refactoring (No Command Needed)</div>
            <p>The <code>simplify:create-plan.md</code> from Phase 2 already includes executable task checklists.</p>
        </div>
    </div>
    
    <h4>Generated Files:</h4>
    <ul class="file-list">
        <li>/tasks/tasks-[prd-file-name].md - Detailed implementation tasks with sub-tasks</li>
        <li>Relevant files section - Lists all files that need creation/modification</li>
    </ul>

- number: "4"
  title: "Automated Execution"
  content: |
    <p>The core implementation phase with sophisticated safety checks, git management, and resumable execution.</p>
    
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üöÄ Feature Implementation</div>
            <h4>Command:</h4>
            <ul class="command-list">
                <li>user:process-tasks.md [task-file]</li>
                <li>user:process-tasks.md [task-file] NOSUBCONF</li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">üîß Simplification Execution</div>
            <h4>Command:</h4>
            <ul class="command-list">
                <li>simplify:process-plan.md [plan-file]</li>
                <li>simplify:process-plan.md [plan-file] NOSUBCONF</li>
            </ul>
        </div>
    </div>
    
    <div class="quality-checks">
        <div class="quality-check">
            <h4>üåø Git Branch Safety</h4>
            <p>Verifies you're on a feature branch, creates one if needed. Never works on main branch.</p>
        </div>
        <div class="quality-check">
            <h4>üß™ Test Suite Integration</h4>
            <p>Uses TESTING.md/CLAUDE.md protocols. Tests run after each major step and parent task completion.</p>
        </div>
        <div class="quality-check">
            <h4>‚úÖ Real-time Progress Tracking</h4>
            <p>Updates task checkboxes immediately after completion. No batching - real-time visibility.</p>
        </div>
        <div class="quality-check">
            <h4>üîÑ Stateless & Interruptible</h4>
            <p>All state stored in task files. Can interrupt, switch projects, and resume exactly where you left off.</p>
        </div>
        <div class="quality-check">
            <h4>üìù Conventional Commits</h4>
            <p>Uses structured commit messages with feat:/fix:/refactor: prefixes and detailed descriptions.</p>
        </div>
        <div class="quality-check">
            <h4>‚ö° NOSUBCONF Mode</h4>
            <p>Optional flag to skip sub-task confirmations for faster automated processing.</p>
        </div>
    </div>
    
    <h4>üìã Command Examples:</h4>
    <div class="branch-container">
        <div class="branch feature">
            <div class="branch-title">üöÄ Feature Implementation</div>
            <ul class="command-list">
                <li><code>/user:process-tasks.md tasks/tasks-user-auth.md</code> - Execute with confirmation</li>
                <li><code>/user:process-tasks.md tasks/tasks-notifications.md NOSUBCONF</code> - Auto mode</li>
                <li><code>/user:process-tasks.md tasks/tasks-payment-system.md</code> - Step-by-step</li>
            </ul>
        </div>
        
        <div class="branch refactor">
            <div class="branch-title">üîß Simplification Execution</div>
            <ul class="command-list">
                <li><code>/simplify:process-plan.md tasks/simplify-plan-auth.md</code> - Safe execution</li>
                <li><code>/simplify:process-plan.md tasks/simplify-plan-legacy.md NOSUBCONF</code> - Automated</li>
                <li><code>/simplify:process-plan.md tasks/simplify-plan-components.md</code> - Reviewed execution</li>
            </ul>
        </div>
    </div>
    
    <div class="highlight">
        <strong>Execution Philosophy:</strong> One sub-task at a time with immediate progress updates. The system maintains perfect resumability by storing all state in the markdown task files themselves.
    </div>

- number: "5"
  title: "Quality Review & Integration"
  content: |
    <p>Multi-layered quality assurance with AI-assisted reviews and human oversight.</p>
    
    <h4>Review Stages:</h4>
    <ul class="feature-list">
        <li><strong>Initial Quality Review:</strong> Automated review of the complete changeset</li>
        <li><strong>Feedback Integration:</strong> Claude Code evaluates and implements critical recommendations</li>
        <li><strong>Pull Request Creation:</strong> Submit changes for team review</li>
        <li><strong>PR Review:</strong> Additional Claude Code review on the pull request</li>
        <li><strong>Manual Testing:</strong> Final human verification before merge</li>
    </ul>
    
    <h4>Commands:</h4>
    <ul class="command-list">
        <li>quality-review</li>
        <li>pr-review</li>
    </ul>
    
    <h4>üìã Command Examples:</h4>
    <div class="quality-checks">
        <div class="quality-check">
            <h4>üîç Quality Review Commands</h4>
            <ul class="command-list">
                <li><code>/quality-review</code> - Review current changeset</li>
                <li><code>/quality-review --all</code> - Full repository analysis</li>
                <li><code>/quality-review src/auth/</code> - Focus on specific module</li>
            </ul>
        </div>
        <div class="quality-check">
            <h4>üîÑ PR Review Commands</h4>
            <ul class="command-list">
                <li><code>/pr-review</code> - Review current pull request</li>
                <li><code>/pr-review #123</code> - Review specific PR number</li>
                <li><code>/pr-review --security</code> - Focus on security issues</li>
            </ul>
        </div>
        <div class="quality-check">
            <h4>üöÄ Integration Commands</h4>
            <ul class="command-list">
                <li><code>git push origin feature/user-auth</code> - Push feature branch</li>
                <li><code>gh pr create --title "Add user authentication"</code> - Create PR</li>
                <li><code>/pr-review</code> - Final review before merge</li>
            </ul>
        </div>
    </div>
    
    <div class="highlight">
        <strong>Smart Implementation:</strong> Claude Code doesn't blindly implement all recommendations - it evaluates them and prioritizes serious concerns while maintaining code quality.
    </div>

- number: "6"
  title: "Final Integration"
  content: |
    <p>The final human-in-the-loop verification before merging changes to main.</p>
    
    <h4>Final Steps:</h4>
    <ul class="feature-list">
        <li>Manual testing on the feature branch</li>
        <li>Visual and functional verification</li>
        <li>Final code review</li>
        <li>Merge pull request</li>
        <li>Clean up feature branch</li>
    </ul>
    
    <div class="highlight">
        <strong>Human Oversight:</strong> While the process is highly automated, human judgment remains critical for final quality assurance and user experience validation.
    </div>